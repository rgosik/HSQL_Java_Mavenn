package com.example.shdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.shdemo.domain.Ball;
import com.example.shdemo.service.BallManager;




public class BallMangerHibernateImpl implements BallManager {

	Connection connection;
	String url = "jdbc:hsqldb:hsql://localhost/workdb";
	String createTableBall = "CREATE TABLE Ball(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20) UNIQUE, price double, tax int, type varchar(20))";
	PreparedStatement addBallStmt;
	PreparedStatement updateBallStmt;
	PreparedStatement deleteBallStmt;
	PreparedStatement searchBallStmt;
	PreparedStatement deleteAllFBallsStmt;
	PreparedStatement getAllBallsStmt;
	Statement statement;

	public BallMangerHibernateImpl() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Ball".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableBall);

			addBallStmt = connection.prepareStatement("INSERT INTO Ball (name, price, tax, type) VALUES (?, ?, ?, ?)");
			deleteBallStmt = connection.prepareStatement("DELETE FROM Ball WHERE name=?");
			updateBallStmt = connection.prepareStatement("UPDATE Ball SET price=?, tax=?, type=? WHERE name=?");
			searchBallStmt = connection.prepareStatement("SELECT * FROM Ball WHERE name=?");
			deleteAllFBallsStmt = connection.prepareStatement("DELETE FROM Ball");
			getAllBallsStmt = connection.prepareStatement("SELECT id, name, price, tax, type FROM Ball");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return connection;
	}
	
	

	public void clearBalls() {
		try {
			deleteAllFBallsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addBall(Ball ball) {
		int count = 0;
		try {
			addBallStmt.setString(1, ball.getName());
			addBallStmt.setDouble(2, ball.getPrice());
			addBallStmt.setInt(3, ball.getTax());
			addBallStmt.setString(4, ball.getType());
			count = addBallStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int updateBall(Ball ball) {
		int count = 0;
		try {
			updateBallStmt.setDouble(1, ball.getPrice()-5.0);
			updateBallStmt.setInt(2, ball.getTax()-3);
			updateBallStmt.setString(3, ball.getType());
			updateBallStmt.setString(4, ball.getName());

			count = updateBallStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public Ball searchBall(String name) {

		Ball ballSamp = new Ball();
		try {
			searchBallStmt.setString(1,name);
			ResultSet rs = searchBallStmt.executeQuery();
			while ( rs.next() ) {
				ballSamp.setId(rs.getInt("id"));
				ballSamp.setName(rs.getString("name"));
				ballSamp.setPrice(rs.getInt("price"));
				ballSamp.setTax(rs.getInt("tax"));
				ballSamp.setType(rs.getString("type"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return ballSamp;
	}

	public List<Ball> getAllBalls() {
		List<Ball> balls = new ArrayList<Ball>();

		try {
			ResultSet rs = getAllBallsStmt.executeQuery();
			while ( rs.next() ) {
				Ball ballSamp = new Ball();
				ballSamp.setId(rs.getInt("id"));
				ballSamp.setName(rs.getString("name"));
				ballSamp.setPrice(rs.getInt("price"));
				ballSamp.setTax(rs.getInt("tax"));
				ballSamp.setType(rs.getString("type"));
				balls.add(ballSamp);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return balls;
	}	
	
	public void addAll(List<Ball> balls) {
		
		try{
			connection.setAutoCommit(false);
			for (Ball ball: balls){
				addBallStmt.setString(1, ball.getName());
				addBallStmt.setDouble(2, ball.getPrice());
				addBallStmt.setInt(3, ball.getTax());
				addBallStmt.setString(4, ball.getType());
				addBallStmt.executeUpdate();
			}
			connection.commit();
			
		} catch (SQLException exception){

			try{
				connection.rollback();
			} catch (SQLException exc) {
				exc.printStackTrace();
			}
		}		
	}	

	public void deleteAll(List<Ball> balls) {
		try{
			connection.setAutoCommit(false);
			for (Ball ball: balls){
				deleteBallStmt.setString(1, ball.getName());
				deleteBallStmt.executeUpdate();
			}
			connection.commit();

		} catch (SQLException exception){
			try{
				connection.rollback();
			} catch (SQLException exc) {
				exc.printStackTrace();
			}
		}
	}	
}

